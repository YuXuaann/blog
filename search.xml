<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最终报告</title>
    <url>/2024/08/27/test1/</url>
    <content><![CDATA[<center><b><p style = "font-size:48px">NSCSCC2024 设计报告</p></b></center>

<center><b><p style = "font-size:24px">杭州电子科技大学 NoAXI队</p></b></center>

<p><img src="/../primary-report/Pipeline.drawio.svg" alt="pipeline"></p>
<div STYLE="page-break-after: always;"></div>

<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>本项目是第八届”龙芯杯”全国大学生计算机系统能力培养大赛（NSCSCC 2024）的参赛作品。</p>
<p>本项目为基于龙芯架构 32 位精简版指令集(LA32R)，开发的一款乱序多发射的 CPU。项目基于 Tomasulo 动态调度算法，使用 ROB 重排序缓存，实现了一个<strong>乱序执行</strong>、<strong>后端四发射</strong>的 CPU，最深级数到达了<strong>13</strong>。此外，我们还实现了分支预测、Cache 缓存等诸多特性。我们在官方提供的性能测试框架当中，达到了<strong>0.78</strong>的 IPC，I&#x2F;DCache 的命中率均达到了**98.8%**以上，使得 CPU 取得了良好的性能表现。</p>
<h2 id="1-2-处理器总体参数"><a href="#1-2-处理器总体参数" class="headerlink" title="1.2 处理器总体参数"></a>1.2 处理器总体参数</h2><p>我们非常关注处理器执行指令的效率，因此，下面将给出我们 CPU 在执行官方提供的性能测试框架时的相关参数概览。</p>
<p>从下表可以看到，我们的 I&#x2F;D-Cache 达到了 98%以上的高命中率，优秀的访存维护逻辑使得我们的 CPU 在访存密集型测试集当中保持了良好的 IPC。同时我们的分支命中成功率也达到了 91.4%，这使得我们的 CPU 能够尽可能地避免分支预测失败带来的大量气泡，为我们加深流水级、实现后端乱序执行打下了良好的基础。</p>
<table>
<thead>
<tr>
<th align="center">项目</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IPC</td>
<td align="center">0.78</td>
</tr>
<tr>
<td align="center">频率</td>
<td align="center">83hz</td>
</tr>
<tr>
<td align="center">分支预测成功率</td>
<td align="center">91.4%</td>
</tr>
<tr>
<td align="center">I-Cache 命中率</td>
<td align="center">99.6%</td>
</tr>
<tr>
<td align="center">D-Cache 命中率</td>
<td align="center">98.8%</td>
</tr>
<tr>
<td align="center">流水级数</td>
<td align="center">13</td>
</tr>
</tbody></table>
<h2 id="1-3-实现功能"><a href="#1-3-实现功能" class="headerlink" title="1.3 实现功能"></a>1.3 实现功能</h2><p>我们的指令集支持了龙芯架构 32 位精简版中除了浮点指令以外的所有指令，并支持了指令集中全部 CSR 寄存器的维护，实现了丰富的指令功能。</p>
<ul>
<li>算数类指令：<code>ADD.W</code>, <code>SUB.W</code>, <code>ADDI.W</code>, <code>LU12I.W</code>, <code>SLT[U]</code>, <code>SLT[U]I</code>, <code>PCADDU12I</code>, <code>AND</code>, <code>OR</code>, <code>NOR</code>, <code>XOR</code>, <code>ANDI</code>, <code>ORI</code>, <code>XORI</code>, <code>MUL.W</code>, <code>MULH.W[U]</code>, <code>DIV.W[U]</code>, <code>MOD.W[U]</code>, <code>SLL.W</code>, <code>SRL.W</code>, <code>SRA.W</code>, <code>SLLI.W</code>, <code>SRLI.W</code>, <code>SRAI.W</code></li>
<li>跳转指令：<code>BEQ</code>, <code>BNE</code>, <code>BLT[U]</code>, <code>BGE[U]</code>, <code>B</code>, <code>BL</code>, <code>JIRL</code></li>
<li>访存指令：<code>LD.B</code>, <code>LD.H</code>, <code>LD.W</code>, <code>LD.BU</code>, <code>LD.HU</code>, <code>ST.B</code>, <code>ST.H</code>, <code>ST.W</code>,<code>LL</code>,<code>SC</code></li>
<li>CSR 相关指令：<code>CSRRD</code>, <code>CSRWR</code>, <code>CSRXCHG</code></li>
<li>Cache 相关指令：<code>CACOP</code></li>
<li>TLB 相关指令：<code>TLBSRCH</code>, <code>TLBRD</code>, <code>TLBWR</code>, <code>TLBFILL</code>, <code>INVTLB</code></li>
<li>栅障指令：<code>IBAR</code>,<code>DBAR</code></li>
<li>其他杂项指令：<code>RDCNTVL.W</code>, <code>RDCNTVH.W</code>, <code>RDCNTID</code>, <code>SYSCALL</code>, <code>BREAK</code>, <code>ERTN</code></li>
</ul>
<h1 id="2-处理器微架构设计"><a href="#2-处理器微架构设计" class="headerlink" title="2. 处理器微架构设计"></a>2. 处理器微架构设计</h1><h2 id="2-1-整体介绍"><a href="#2-1-整体介绍" class="headerlink" title="2.1 整体介绍"></a>2.1 整体介绍</h2><p>NoAXI 处理器采取前后端设计，前端共 5 个流水级，后端共 6 个流水级，共 11 个流水级，最深级数为 13。</p>
<p>前端五个流水级，分别为 <strong>预取指</strong>、<strong>取指</strong>、<strong>预译码</strong>、<strong>译码</strong>、<strong>重命名</strong>。</p>
<p>后端分为六个流水级，分别为 <strong>分发</strong>、<strong>发射</strong>、<strong>读寄存器</strong>、<strong>执行</strong>、<strong>写回</strong>、<strong>提交</strong>。</p>
<p>其中<strong>执行</strong>级分为并行的四条流水线，分别为：<strong>算术流水线 0</strong>、<strong>算术流水线 1</strong>、<strong>乘除流水线</strong>、<strong>访存流水线</strong>。</p>
<p>前端采取顺序双发射设计，取指宽度为 2，每个周期可以向后端最多传输 2 条指令。</p>
<p>后端采取乱序四发射设计，流水线条数为 4，每个周期可以进行最多 2 条指令的提交。</p>
<h2 id="2-2-前端设计"><a href="#2-2-前端设计" class="headerlink" title="2.2 前端设计"></a>2.2 前端设计</h2><p>前端分为 <strong>预取指</strong>（<code>PreFetch</code>）、<strong>取指</strong>（<code>Fetch</code>）、<strong>预译码</strong>（<code>PreDecode</code>）、<strong>译码</strong>（<code>Decode</code>）、<strong>重命名</strong>（<code>Rename</code>） 共五级。</p>
<p>其中，预译码级与译码级之间，使用了一个指令缓冲（<code>Instruction Buffer</code>）进行解耦。</p>
<h3 id="2-2-1-预取指-PreFetch"><a href="#2-2-1-预取指-PreFetch" class="headerlink" title="2.2.1 预取指 PreFetch"></a>2.2.1 预取指 PreFetch</h3><p>在这一级中进行<strong>pc</strong>的更新，并且将虚地址发送给<code>TLB</code>。</p>
<ol>
<li><strong>pc</strong>发送至<code>TLB</code>，<code>TLB</code>进行翻译<ul>
<li>若是直接地址翻译或直接地址映射，直接将得到的物理地址传递给<code>Fetch</code>级</li>
<li>若是映射地址翻译，给<code>TLB</code>表项发地址，得到命中信息并传递给<code>Fetch</code>级</li>
</ul>
</li>
<li><strong>pc</strong>发送至<code>I-Cache</code>，基于<code>VIPT</code>原理，给<code>I-Cache</code>索引</li>
<li><strong>pc</strong>发送至<code>BPU</code>，进行分支预测(发送按双字对齐的两个<strong>pc</strong>进行预测，如果第二个<strong>pc</strong>不满足双字对齐则不预测)<ul>
<li><strong>pc</strong>发送至<code>BTB</code>读取信息</li>
<li><strong>pc</strong>发送至<code>BHT</code>得到跳转历史，寄存器锁存供下一拍使用</li>
</ul>
</li>
<li>根据情况更新<strong>pc</strong><ul>
<li>(最高优先级)后端传来的跳转请求：可能是例外中断造成的跳转，也可能是特权指令需要冲刷流水线，也可能是分支预测失败的重新取指</li>
<li>(第二优先级)分支预测传来的跳转请求</li>
<li>(第三优先级)更新<strong>pc</strong>为按双字对齐的下一个<strong>pc</strong>，例如 1c001000 $\rightarrow$ 1c001008，1c00110c $\rightarrow$ 1c001110</li>
</ul>
</li>
</ol>
<h3 id="2-2-2-取指-Fetch"><a href="#2-2-2-取指-Fetch" class="headerlink" title="2.2.2 取指 Fetch"></a>2.2.2 取指 Fetch</h3><p>为降低硬件复杂度，我们设计了独特的取指方式，选择<strong>双字对齐</strong>方式的<strong>双指令取指</strong>。相较于四指令取指，这样的取指方式降低了因分支预测造成的标记无效指令的硬件开销，并且，效率也不会得到大幅降低，因为我们的<code>I-Cache</code>一行存四个指令，大部分正常取指的情况下，两次取指中的第二次是<strong>必定命中</strong><code>I-Cache</code>的，保证了前端取指的高效。</p>
<ol>
<li>在此级中把命中信息发送至<code>TLB</code>，读出命中表项，翻译出<strong>paddr</strong>；并且判断是否存在<code>TLB</code>相关例外</li>
<li>将得到的<strong>paddr</strong>发送至<code>I-Cache</code>，判定是否命中，若不命中则进入阻塞状态，并与主存利用 axi 接口交互取出 Cache 缺失行</li>
<li>取出两条指令，并且保证 pc 是按双字对齐的，若第二条指令<strong>pc</strong>未满足条件则会标记为无效</li>
<li>得到分支预测的结果<ul>
<li>利用上一拍得到的<code>BTB</code>信息和<code>BHT</code>中读取到的<code>BHR</code>，得到预测方向和跳转结果</li>
<li>若预测跳转，清刷<code>prefetch</code>并对其发出跳转请求</li>
</ul>
</li>
</ol>
<h4 id="2-2-2-1-分支预测器-BPU"><a href="#2-2-2-1-分支预测器-BPU" class="headerlink" title="2.2.2.1 分支预测器 BPU"></a>2.2.2.1 分支预测器 BPU</h4><p><img src="/BPU.svg" alt="alt text"></p>
<p>在乱序处理器当中，因为流水级数深，分支预测失败代价过大。因此，分支预测器很大程度上决定着 cpu 的<strong>IPC</strong>。<br>为降低硬件复杂度，我们同样设计了<strong>两级 BPU</strong>，将整个预测过程分为了两拍完成。我们使用了<strong>基于局部历史的饱和计数器分支预测</strong>结合<strong>BTB</strong>和<strong>RAS</strong>对多种分支场景进行了有效的分支预测，下表是性能测试中十个测试点的具体成绩。</p>
<table>
<thead>
<tr>
<th align="center">测试点编号</th>
<th align="center">测试点名称</th>
<th align="center">无 RAS 分支预测成功率</th>
<th align="center">分支预测成功率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">bitcount</td>
<td align="center">80.510 %</td>
<td align="center"><strong>94.509 %</strong></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">bubble_sort</td>
<td align="center">&#x2F;</td>
<td align="center">84.935 %</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">coremark</td>
<td align="center">&#x2F;</td>
<td align="center">88.955 %</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">crc32</td>
<td align="center">90.100 %</td>
<td align="center"><strong>96.367 %</strong></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">dhrystone</td>
<td align="center">&#x2F;</td>
<td align="center">95.331 %</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">quick_sort</td>
<td align="center">&#x2F;</td>
<td align="center">74.780 %</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">select_sort</td>
<td align="center">&#x2F;</td>
<td align="center">93.456 %</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">sha</td>
<td align="center">&#x2F;</td>
<td align="center">98.284 %</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">stream_copy</td>
<td align="center">&#x2F;</td>
<td align="center">95.924 %</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">stringsearch</td>
<td align="center">&#x2F;</td>
<td align="center">93.666 %</td>
</tr>
</tbody></table>
<ol>
<li><p><code>BHT(Branch History Table)</code>：保存跳转指令的跳转局部历史，在跳转指令提交时更新</p>
</li>
<li><p><code>PHT(Pattern History Table)</code>：记录跳转历史对应的饱和计数器值，对应跳转的方向趋势，用于预测跳转方向</p>
</li>
<li><p><code>BTB(Branch Target Buffer)</code>：记录<strong>pc</strong>对应的跳转地址，兼顾判断跳转类型(<strong>CALL</strong>,<strong>Return</strong>,其他)的职责</p>
<ul>
<li>适用指令：条件跳转类和<strong>CALL</strong>型指令</li>
<li>用途：记录指令的跳转类型，是否为跳转指令(<code>valid</code>位)，跳转地址</li>
<li>仅当<code>BTB</code>命中时才可能发生分支预测</li>
<li>表项组织形式如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Valid</th>
<th align="center">Tag</th>
<th align="center">Target</th>
<th align="center">Br_type</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1 b</td>
<td align="center">(32 - index) b</td>
<td align="center">32 b</td>
<td align="center">2 b</td>
</tr>
</tbody></table>
</li>
<li><p><code>RAS(Return Address Stack)</code>：以<strong>栈</strong>的形式记录<strong>CALL</strong>指令的下一条指令地址</p>
<ul>
<li>适用指令：间接跳转<strong>Return</strong>指令</li>
<li>用途：预测<strong>Return</strong>指令的跳转地址(因为函数调用和返回一定满足<strong>栈</strong>的性质)，上表中<strong>加粗</strong>表示的即为<code>RAS</code>对函数调用密集型测试点的重大作用</li>
<li><code>RAS</code>满时，对<code>RAS</code>使用循环更新，即再从底向上开始更新，可以尽可能保证预测准确性</li>
</ul>
</li>
<li><p>分支预测器不会被 flush</p>
</li>
</ol>
<h4 id="2-2-2-2-TLB"><a href="#2-2-2-2-TLB" class="headerlink" title="2.2.2.2 TLB"></a>2.2.2.2 TLB</h4><p>考虑到<code>TLB</code>的全相连结构，它在被查询时硬件复杂度较高。为此，我们设计了<strong>同步读取</strong>的<code>TLB</code>逻辑，无论是前端还是后端的地址翻译，我们均会在第一拍发送虚地址，进行<code>TLB</code>表项的查询，同时进行<code>mmu</code>的判断，是否为直接地址翻译或直接地址映射，若为<code>TLB</code>页表映射，则<strong>锁存</strong>命中信息供下一拍使用；在下一拍同时得到例外有关信息。这样的设计均摊了查询<code>TLB</code>表项的复杂度，有效的提高了频率。</p>
<h3 id="2-2-3-预译码-PreDecode"><a href="#2-2-3-预译码-PreDecode" class="headerlink" title="2.2.3 预译码 PreDecode"></a>2.2.3 预译码 PreDecode</h3><p>为进一步降低分支预测失败造成的影响，我们创造性的在解码之前加入了<strong>预译码</strong>级，在这一级中，我们在力所能及的程度下对分支结果进行<strong>最迅速</strong>的检查，并且在发现错误的<strong>第一时间</strong>通知前端重新取指。</p>
<p>在这一级中会处理以下情况：</p>
<ol>
<li>必定跳转指令但预测不跳转：大概率是初次执行，更正预测结果并且更新分支预测器</li>
<li>非跳转指令但预测跳转：不可能产生这种情况，因为仅当<code>BTB</code>命中才会产生预测，非跳转指令<code>BTB</code>不可能命中</li>
<li>如若跳转地址错误，更正预测结果并且更新分支预测器</li>
</ol>
<h4 id="2-2-3-1-指令缓冲-Instruction-Buffer-IB"><a href="#2-2-3-1-指令缓冲-Instruction-Buffer-IB" class="headerlink" title="2.2.3.1 指令缓冲 Instruction Buffer (IB)"></a>2.2.3.1 指令缓冲 Instruction Buffer (IB)</h4><p>在预译码级与译码级之间，我们使用<strong>自己设计</strong>的<code>FIFO</code>，实现了一个指令缓冲，用于解耦取指级与译码级。该缓冲让取指效率最大化，无论后端是否阻塞都不会浪费前端的取指资源，做到了效率的最大利用；前端只需专注取指并填充至<code>IB</code>，而后端只需专注于从<code>IB</code>中取出指令并执行，极大地提高了处理器的执行效率。</p>
<p>同时，为了保证后续流水线资源的最大利用率，取指前端保证<code>IB</code>中的信息均为有效指令，排除任何气泡指令向下一级传输。</p>
<h3 id="2-1-4-译码-Decode"><a href="#2-1-4-译码-Decode" class="headerlink" title="2.1.4 译码 Decode"></a>2.1.4 译码 Decode</h3><p>本级用于译码，我们通过 chisel 语言的特性，利用<code>BitPat</code>生成树形译码元件进行译码，并输出指令所需信息(例如功能模块名和具体功能)，做到了代码上的清晰明了。</p>
<p>同时，我们会在这一级对于指令进行中断的标记，保证了 CPU 资源的利用率。</p>
<h3 id="2-2-5-重命名-Rename"><a href="#2-2-5-重命名-Rename" class="headerlink" title="2.2.5 重命名 Rename"></a>2.2.5 重命名 Rename</h3><p>重命名级是 CPU<strong>乱序</strong>架构当中至关重要的一环。为了消除 CPU 后端乱序写回带来的<strong>写后写</strong>、<strong>读后写</strong>的相关性问题，保证乱序执行的正确性，在重命名级当中，我们将对于逻辑寄存器<code>areg</code>进行物理寄存器<code>preg</code>的分配。</p>
<p>同时，为了保证指令乱序执行后，能够<strong>顺序</strong>地对于处理器状态进行更新，我们还需要对于重排序缓存<code>ROB</code>进行表项空间的申请，获得本级指令对应的<strong>ROB 编号</strong>，从而保证最终在后端提交时能够通过编号实现顺序的提交。</p>
<p>具体实现时，当<code>RAT</code>分配物理寄存器时，将会从空闲寄存器表<code>freelist</code>当中取最多两个空闲寄存器，作为原逻辑寄存器<code>areg</code>对应的物理寄存器<code>preg</code>。同时，这一级会向发射级发送占用寄存器的请求，以此阻塞发射队列当中的相关指令，从而保证了后端指令唤醒顺序的正确性。在申请<code>ROB</code>空间的时候，<code>ROB</code>通过其<code>fifo</code>指针分配两条指令对应的<code>ROB</code>编号，并且会保存指令对应的信息。</p>
<p>至此，指令开始占用寄存器映射表信息、<code>ROB</code>表项、物理寄存器资源，可以认为指令从本级开始即将进入后端执行的流程当中。</p>
<p><img src="/./rename.drawio.svg"></p>
<h2 id="2-3-后端设计"><a href="#2-3-后端设计" class="headerlink" title="2.3 后端设计"></a>2.3 后端设计</h2><p>后端分为六个流水级，分别为<strong>分发</strong>（<code>Dispatch</code>）、<strong>发射</strong>（<code>Issue</code>）、<strong>读寄存器</strong>（<code>ReadReg</code>）、<strong>执行</strong>（<code>Execute</code>）、<strong>写回</strong>（<code>WriteBack</code>）、<strong>提交</strong>（<code>Commit</code>）。其中，执行级又根据流水线功能的不同，细分为 1~3 个流水级。算术流水线只有一级执行级，而乘除和访存有三级执行级。</p>
<p>从发射级开始，后端分为四条独立的流水线，分别是 2 条<strong>算术</strong>执行流水线，1 条<strong>乘除</strong>法执行流水线，1 条<strong>访存</strong>执行流水线。</p>
<p>需要注意的是，特权指令放在乘除法。为了保证 csr 写指令的正确性，在重排序缓存提交指令的时候，才写 csr 寄存器并冲刷整条流水线。</p>
<p><img src="/backend-final.drawio.svg" alt="backend"></p>
<h3 id="2-3-1-分发-Dispatch"><a href="#2-3-1-分发-Dispatch" class="headerlink" title="2.3.1 分发 Dispatch"></a>2.3.1 分发 Dispatch</h3><p>本级会根据指令的类型，分发指令到各个流水线发射缓存当中。考虑到后端很有可能处于访存密集或算术密集状态，某一流水线可能被完全占满，因此我们的分发级允许只分发一条，而保留第二条指令到握手成功再进行分发。这样的分发逻辑能够使得满流水线时也能执行一定数量的其他流水线指令，从而提高了 CPU 的执行效率。</p>
<h3 id="2-3-2-发射-Issue"><a href="#2-3-2-发射-Issue" class="headerlink" title="2.3.2 发射 Issue"></a>2.3.2 发射 Issue</h3><p>这里定义了四个发射队列，对于单个发射队列，每个周期最多接收、发射一条指令。</p>
<p>不同流水线的发射情况如下：</p>
<ol>
<li>运算流水线，我们已经通过寄存器重命名保证了乱序写回的正确性，因此乱序发射即可。</li>
<li>乘除流水线，由于我们将特权指令分配在了本流水线，因此本流水线需要保证顺序发射。</li>
<li>访存流水线，由于数据缓存只有一个，且需要维护访存数据的一致性，所以必须保证顺序发射。</li>
</ol>
<p>对于乱序发射的队列，我们使用了压缩队列实现。发射时将检查队列内所有指令的寄存器占用状态，若发现相关寄存器均已被唤醒则可以发射。关于寄存器占用状态的维护，我们会在发出唤醒信号的下一拍更新状态，并额外维护从写缓存中回传的 uncached load 的对应占用状态，防止冲刷导致相关寄存器的占用状态被解除。</p>
<p>对于乱序发射的队列，会按照指令从旧到新的优先级进行发射，这是因为较旧的指令更有可能拥有较多的相关指令，一次发射能够唤醒更多的指令。对于顺序发射的队列，我们每个周期只会对队列头部的指令进行寄存器占用情况的检查，只会发射队列中的最旧指令，从而保证了这些需要顺序执行的指令的一致性。</p>
<h3 id="2-3-3-读寄存器-ReadReg"><a href="#2-3-3-读寄存器-ReadReg" class="headerlink" title="2.3.3 读寄存器 ReadReg"></a>2.3.3 读寄存器 ReadReg</h3><p>这一级流水线在每条流水线当中都独立存在，负责从物理寄存器当中读出源操作数对应的数值。寄存器堆对于每一条流水线都分配了一个读接口。同时这一级也会接收<strong>执行级</strong>和<strong>写回级</strong>前递的信息，用于实现指令的背靠背执行的前递信号传递。 发生前递时，我们会对于前递的寄存器号进行比较。于我们比较的是物理寄存器地址，必定保证写相关寄存器的指令最多只会存在一个，因此可以使用独热码的判命中逻辑，这节约了一定的逻辑复杂度。</p>
<p>如果是算术流水线的读寄存器阶段，还会进行相关指令的唤醒。在本级进行唤醒，能够保证下一拍相关指令进入 readreg 级，从而直接从算术执行级当中获得前递的数据，从而保证了指令的背靠背执行。</p>
<p><img src="/./forward.drawio.svg"></p>
<h3 id="2-3-4-算术流水线-Arithmetic"><a href="#2-3-4-算术流水线-Arithmetic" class="headerlink" title="2.3.4 算术流水线 Arithmetic"></a>2.3.4 算术流水线 Arithmetic</h3><p>算术流水线是 CPU 执行过程当中，访问最频繁的流水线。在算术流水线当中，我们的 CPU 会进行算术和分支指令的执行过程。考虑到这两类指令需要的元器件数目并不多，可以分配多条算术流水线用于这类指令的执行。</p>
<p>由于我们的前端取指深度为 2，后端也应该分配两条算术流水线，以保证算术密集型指令集当中，CPU 后端理论能够持续维持双发射的算术指令提交行为。我们在算术指令密集的 bitcount 等测试集当中，获得了 1.2 以上的 IPC，这证明了我们运算流水线双发+背靠背执行逻辑的可靠性。</p>
<h3 id="2-3-5-乘除流水线-Muldiv"><a href="#2-3-5-乘除流水线-Muldiv" class="headerlink" title="2.3.5 乘除流水线 Muldiv"></a>2.3.5 乘除流水线 Muldiv</h3><p>用于乘除指令与特权指令的执行，分为三级。拆分成多个流水级的主要原因是需要实现乘法运算的流水化。</p>
<p>对于乘法运算，我们使用 xilinx ip 搭载了一个三级流水的乘法器，实现了乘法运算的流水化，这使得我们在执行大量乘法运算的时候，能够实现完全的流水化提交过程，优化了 CPU 的执行效率。</p>
<p>对于除法运算，我们使用 xilinx ip 实现了除法器，并在乘除流水线的第一级中进行阻塞执行，考虑到除法指令在实际程序中的占比较低，阻塞式的执行逻辑并不会对于我们的执行效率产生过大影响。</p>
<p>对于特权指令，我们会将写指令放入特权缓存<code>PrivBuffer</code>当中，并阻塞后续所有特权指令，直到后端 ROB 进行提交的时候，才使得相关的非普通寄存器更改生效。这样的提交逻辑能够有效保证特权指令配置的一致性，防止特权指令提早对于处理器状态进行更改，并做到了较低的逻辑复杂度，能够更好的优化特权指令提交的复杂度。</p>
<h3 id="2-3-6-访存流水线-Memory"><a href="#2-3-6-访存流水线-Memory" class="headerlink" title="2.3.6 访存流水线 Memory"></a>2.3.6 访存流水线 Memory</h3><p>访存流水线是后端流水线当中最重要的一条，也是设计难度最高的一条。</p>
<p>对于访存指令，某些访存指令会对处理器状态进行修改，因为其对处理器状态产生的影响不好撤销，所以当执行这些指令时，使用<code>Store Buffer</code>(写缓存)对这种类型的访存指令进行暂存，只有当提交时，才会<strong>回传</strong>至访存流水线真正执行。</p>
<p>考虑到硬件复杂度和频率要求，我们设计了<strong>多级流水线</strong>以提高频率。</p>
<h4 id="2-3-6-1-Mem0"><a href="#2-3-6-1-Mem0" class="headerlink" title="2.3.6.1 Mem0"></a>2.3.6.1 Mem0</h4><p>这一级用于计算访存的虚地址以及 TLB 的相关信息。</p>
<p>按照 2.2.2.2 TLB 提到的<strong>同步读取</strong>的 TLB 设计，我们会在本级计算<strong>vaddr</strong>，并发送至<code>TLB</code>，由<code>TLB</code>进行翻译。</p>
<ul>
<li>若是直接地址翻译或直接地址映射，直接将得到的物理地址传递给<code>Mem1</code>级</li>
<li>若是映射地址翻译，给<code>TLB</code>表项发地址，得到命中信息并传递给<code>Mem1</code>级</li>
</ul>
<h4 id="2-3-6-2-Mem1"><a href="#2-3-6-2-Mem1" class="headerlink" title="2.3.6.2 Mem1"></a>2.3.6.2 Mem1</h4><p>在这一级中会选择接受是已提交的访存指令还是<code>Mem0</code>传递而来的指令。在仲裁两条指令的时候，我们会优先选择已提交的访存指令进行执行，从而防止了因为缓存满而导致的阻塞。</p>
<p>除此之外，Mem1 级还会对于 TLB 相关信息进行维护，逻辑如下：</p>
<ol>
<li>在此级中把命中信息发送至<code>TLB</code>，读出命中表项，翻译出<strong>paddr</strong>；并且判断是否存在<code>TLB</code>相关例外</li>
<li><strong>vaddr</strong>发送至<code>D-Cache</code>，索引<code>D-Cache</code>的<code>Tag-sram</code>和<code>Data-sram</code></li>
</ol>
<h4 id="2-3-6-3-Mem2"><a href="#2-3-6-3-Mem2" class="headerlink" title="2.3.6.3 Mem2"></a>2.3.6.3 Mem2</h4><ol>
<li>将<strong>paddr</strong>发送至<code>D-Cache</code>，判定是否命中，若不命中则进入阻塞状态，并与主存利用 axi 接口交互取出 Cache 缺失行，若命中则执行<strong>可执行</strong>的访存指令</li>
<li><strong>可执行</strong>访存指令：cached load 指令，回滚访存指令</li>
<li><strong>不可执行</strong>访存指令：uncached load 指令、store 指令、原子访存指令和 cacop 指令。对于这些指令，将其 push 进<code>Store Buffer</code></li>
<li>对于 cached load 指令，我们将从<code>D-Cache</code>中读出的数据传递下去，在写回级进行前递判断，进而降低<code>mem2</code>的硬件复杂度</li>
</ol>
<h4 id="2-3-6-4-写缓存-Store-Buffer"><a href="#2-3-6-4-写缓存-Store-Buffer" class="headerlink" title="2.3.6.4 写缓存 Store Buffer"></a>2.3.6.4 写缓存 Store Buffer</h4><p>在乱序处理器当中，为了保证处于推测态的访存指令不会对外部状态进行更改，我们使用了写缓存<code>Store Buffer</code>来维护。</p>
<ol>
<li>当接收到<code>ROB</code>的提交后，会将写缓存内的信息通过<code>Mem1</code>级重新回流到访存流水线当中。</li>
<li>由于<code>Mem1</code>需要同时接受来自 Mem0 的数据和来自写缓存的数据，当<code>Mem0</code>向<code>Mem1</code>发送数据时，还会与写缓存发送的数据进行竞争，优先让写缓存内数据进行访存。</li>
<li>当发生 flush 时，<code>Store Buffer</code>直接清空即可</li>
</ol>
<h4 id="2-3-6-5-数据-指令-缓存-Cache"><a href="#2-3-6-5-数据-指令-缓存-Cache" class="headerlink" title="2.3.6.5 数据(指令)缓存 Cache"></a>2.3.6.5 数据(指令)缓存 Cache</h4><p>每路的组织形式如下，在我们的设计中 index &#x3D; 8。</p>
<table>
<thead>
<tr>
<th align="center">Line $0$</th>
<th align="center">bank 0</th>
<th align="center">bank 1</th>
<th align="center">bank 2</th>
<th align="center">bank 3</th>
<th align="center">valid</th>
<th align="center">dirty</th>
<th align="center">Tag</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">1 b</td>
<td align="center">1 b</td>
<td align="center">(32 - index) b</td>
</tr>
</tbody></table>
<p>…</p>
<table>
<thead>
<tr>
<th align="center">Line $2^{index} - 1$</th>
<th align="center">bank 0</th>
<th align="center">bank 1</th>
<th align="center">bank 2</th>
<th align="center">bank 3</th>
<th align="center">valid</th>
<th align="center">dirty</th>
<th align="center">Tag</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">32 b</td>
<td align="center">1 b</td>
<td align="center">1 b</td>
<td align="center">(32 - index) b</td>
</tr>
</tbody></table>
<p><code>I-Cache</code>和<code>D-Cache</code>采取了同样的组织形式，只是<code>I-Cache</code>取消了 dirty 位；bank 在<code>I-Cache</code>代表了指令，在<code>D-Cache</code>中代表了数据。</p>
<p>为了降低访存复杂度，我们着重设计了访存的状态机，为了获得优秀的硬件复杂度将复杂流程拆分。<br>具体状态分为：<code>idle</code>(闲置状态，判断命中)、<code>uncached_read</code>、<code>uncached_write</code>、<code>check_dirty</code>、<code>writeback</code>、<code>replace_line</code>，其中<code>I-Cache</code>无关于写操作的状态</p>
<p><img src="/image-1.png" alt="alt text"></p>
<h3 id="2-3-7-写回-WriteBack"><a href="#2-3-7-写回-WriteBack" class="headerlink" title="2.3.7 写回 WriteBack"></a>2.3.7 写回 WriteBack</h3><p>这一级用于写物理寄存器，更新 rob 当中对应的提交信息，并更新发射队列当中的寄存器占用状态。</p>
<p>对于访存流水线，在我们原先的设计当中，推测唤醒会导致大量控制信号串行，从而导致关键路径产生、频率下降。因此，为了时序考虑，直到这一级才会对与访存指令相关的指令进行唤醒。在这一逻辑下，我们的 IPC 从原先的 0.84 降至 0.78，但我们的频率由 65MHz 升至了 83MHz，相较之下提升幅度达到了 18%，因此我们取消了推测唤醒的设计，改为写回级唤醒。</p>
<h3 id="2-3-8-提交-Commit"><a href="#2-3-8-提交-Commit" class="headerlink" title="2.3.8 提交 Commit"></a>2.3.8 提交 Commit</h3><p>这一级用于进行最终的提交，解除对于 CPU 资源的占用，并解除寄存器的推测态。</p>
<ol>
<li>解除对于上一个物理寄存器的占用（opreg），并将 opreg 对应的寄存器编号插入到空闲寄存器列表 freelist</li>
<li>更新 aRAT 的映射关系，aRAT 当中存储的是由已经提交的指令构成的、不涉及推测态指令的寄存器映射表</li>
<li>对于包括分支、访存、特权在内的部分非算术指令，由于分支预测器更新限制、写缓存入队限制等原因，我们在检测到这些指令的时候，不会进行双指令的提交。假如检测到分支预测失败或例外，还会向冲刷控制器发出冲刷请求。</li>
<li>当发生流水线清空的时候，首先向冲刷控制器发出请求。冲刷控制器会延迟一拍后，对于各个流水线及功能部件发出冲刷信号，并令重命名相关部件进行状态恢复。具体而言，状态恢复时，会将 aRAT 赋值给 cRAT，清空 rob 当中的所有表项，并将 freelist 的尾指针置为头指针位置。</li>
</ol>
<p>在提交级，我们通过 ROB 重排序缓存，成功实现了乱序执行结果的顺序写回过程，保证了乱序 CPU 在执行上的一致性，通过乱序架构的设计，我们的 CPU 达到了良好的性能表现。</p>
<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p>[1]J. Ye, and L. Xi, <em>PUA-MIPS</em>, <a href="https://github.com/Clo91eaf/PUA-MIPS">https://github.com/Clo91eaf/PUA-MIPS</a>, 2023</p>
<p>[2] Z. Ma, <em>LA32R-pipeline-scala</em>, <a href="https://github.com/MaZirui2001/LA32R-pipeline-scala">https://github.com/MaZirui2001/LA32R-pipeline-scala</a>, 2023</p>
<p>[3] H. Gao, and M. Liu, <em>NOP-Core</em>, <a href="https://github.com/NOP-Processor/NOP-Core">https://github.com/NOP-Processor/NOP-Core</a>, 2023</p>
<p>[4] Y. Zhou, S. Chen, X. Liu and J. Chen, <em>Nontrivial-mips</em>,<a href="https://github.com/trivialmips/nontrivial-mips">https://github.com/trivialmips/nontrivial-mips</a>, 2019</p>
<p>[5] W. Wang, and J. Xing, <em>CPU Design and Practice</em>, Beijing: China Machine Press, 2021</p>
<p>[6] Y. Yao, <em>SuperScalar RISC Processor Design</em>, Beijing: Tsinghua University Press, 2014</p>
]]></content>
      <categories>
        <category>nscscc</category>
      </categories>
      <tags>
        <tag>nscscc</tag>
        <tag>答辩</tag>
        <tag>defense</tag>
      </tags>
  </entry>
  <entry>
    <title>E. 2..3...4.... Wonderful! Wonderful! 解题思路</title>
    <url>/2024/02/26/title/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个 $n$，和一个 $1,2,3,4,\dots,n$ 的数组，对于每个 $1 \leq k \leq \lfloor \frac{n-1}{2} \rfloor$，选择长度为 $2k+1$ 的<strong>子序列</strong>，并且删除头和尾的 $k$ 个元素，求执行若干次上述操作（可以是 $0$ 次）所能得到的最终数组个数</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>$$<br>\begin{aligned}<br>ans_{n,k}<br>&amp;&#x3D;1+\sum_{t&#x3D;1}^{\lfloor \frac{n}{2k} \rfloor} \binom{n}{2kt}-\binom{n-2kt+2k-1}{2k-1}\<br>\end{aligned}<br>$$</p>
<p>按上式对一个 $n$ 求出的答案，时间复杂度为 $O(\frac{n}{2}+\frac{n}{4}+\frac{n}{6} +\cdots)&#x3D;O(n\log n)$，可以通过</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="首先，考虑合法状态"><a href="#首先，考虑合法状态" class="headerlink" title="首先，考虑合法状态"></a>首先，考虑合法状态</h3><p>固定 $n$ 和 $k$，考虑从初始数组到<strong>最终数组</strong>的<strong>合法状态</strong>是怎么样的（以 $n&#x3D;10,k&#x3D;2$ 为例）</p>
<p>初始数组：</p>
<p>$$<br>\color{green}1\quad\color{green}2\quad\color{green}3\quad\color{green}4\quad\color{green}5\quad\color{green}6\quad\color{green}7\quad\color{green}8\quad\color{green}9\quad\color{green}{10}<br>$$</p>
<p>最终数组（实例中为<strong>合法状态</strong>）：</p>
<p>$$<br>\require{cancel}<br>\bcancel1\quad\bcancel2\quad\bcancel3\quad\color{green}4\quad\bcancel5\quad\bcancel6\quad\color{green}7\quad\bcancel8\quad\bcancel9\quad\bcancel{10}<br>$$</p>
<h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><p><strong>最终状态</strong>一定是由若干 <strong>块</strong> （一段连续的被删除的数字）组成的，就比如上例中的 $3$ 个<strong>块</strong>：</p>
<p>$$<br>\{<br>    1\quad2\quad3<br>\}\quad<br>\{<br>    5\quad6<br>\}\quad<br>\{<br>    8\quad9\quad10<br>\}<br>$$</p>
<p>且<strong>块</strong>必然由<strong>空</strong>（一段连续的未被删除的数字）隔开</p>
<h4 id="简单情况"><a href="#简单情况" class="headerlink" title="简单情况"></a><strong>简单情况</strong></h4><p>仅考虑有且仅有 $1$ 个<strong>空</strong>（此时必然有 $2$ 个<strong>块</strong>）的情况：</p>
<p>若其中某个<strong>块</strong>的<strong>块的大小</strong>（块内数字个数）小于 $k$，考虑若干次操作后的<strong>最后一次</strong>操作，必然是删<strong>最后剩余</strong>的 $2k$ 个被删除的数字，此时有两种情况（定义<strong>块</strong>小的为<strong>小块</strong>，<strong>块</strong>大的为<strong>大块</strong>）：</p>
<ol>
<li><p><strong>最后剩余</strong>的 $2k$ 个待被删除的数字全在<strong>大块</strong>中：显然非法，此时这 $2k$ 个数<strong>正中间</strong>没有<strong>未被删除的数字</strong>，无法通过选择 $2k+1$ 的子序列删除</p>
</li>
<li><p><strong>最后剩余</strong>的 $2k$ 个待被删除的数字既在<strong>大块</strong>也在<strong>小块</strong>中：显然非法，同上所述，无法在这 $2k$ 个数<strong>正中间</strong>找到<strong>未被删除的数字</strong></p>
</li>
</ol>
<p>若没有某个<strong>块</strong>的<strong>块的大小</strong>小于 $k$，即 $2$ 个<strong>块</strong>的<strong>块的大小</strong>都大于等于 $k$：必然合法，我们只要保证<strong>最后剩余</strong>的 $2k$ 个待被删除的数字分别有 $k$ 个在不同的块中即可，前面的操作我们可以有很多种方法去构造：</p>
<p>$$<br>\{<br>\color{blue}{x\quad{x+1}\dots x+k-1}\quad\color{red}{x+k\dots }<br>\}\quad<br>\{<br>{y\quad{y+1}\dots y+k-1}\quad{y+k\dots }<br>\}<br>$$</p>
<p>如上图所示的 $2$ 个<strong>块</strong>（不妨设左块为<strong>小块</strong>，右块为<strong>大块</strong>），我们只需让<strong>左块</strong>的红色部分和<strong>右块</strong>去删即可，直到<strong>左块</strong>只剩下蓝色部分，再让<strong>右块</strong>自己删到剩下 $k$ 个数（具体而言就是左边取 $k$ 个右边取 $k$ 个）</p>
<p><strong>简单情况结论</strong></p>
<p><strong>合法状态</strong>当且仅当 $2$ 个<strong>块的大小</strong>（块内数字个数）都大于等于 $k$</p>
<h4 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a><strong>一般情况</strong></h4><p>我们注意到<strong>简单情况结论</strong>，其等价形式即为：存在一个<strong>空</strong>，其左右<strong>块</strong>大小均大于等于 $k$</p>
<p>对于一般情况，对比简单情况，无非就是多了<strong>空</strong>和<strong>块</strong></p>
<p>因此拓展一下：“<strong>空</strong>的左右<strong>块</strong>大小均大于等于 $k$”也可以是“<strong>空</strong>的左右<strong>待删数字</strong>个数均大于等于 $k$”（因为既然<strong>块</strong>都可以，那若干<strong>块</strong>当然也可以），由此得到本题的重要结论：</p>
<p><strong>一般情况结论：</strong></p>
<p><strong>合法状态</strong>当且仅当存在一个<strong>空</strong>，其左右<strong>待删数字</strong>个数都大于等于 $k$</p>
<p>对于上述结论，考虑反面“不存在<strong>空</strong>，其左右<strong>待删数字</strong>个数都大于等于 $k$”，那么可以按简单情况（若根本不存在<strong>空</strong>，显然无解）考虑，考虑最后删除的 $2k$ 个数字，此时必然无解（证略），于是便论证了该结论的<strong>完备性</strong></p>
<h3 id="其次，考虑计算"><a href="#其次，考虑计算" class="headerlink" title="其次，考虑计算"></a>其次，考虑计算</h3><p>固定删除元素的个数（设共删去 $2k\cdot t$ 个数），计算合法状态个数</p>
<p>正难则反，正着直接计算<strong>合法状态</strong>情况太多易重复，考虑先计算所有<strong>最终状态</strong>，再减去非法状态</p>
<p><strong>最终状态</strong>总个数：</p>
<p>$$<br>\binom{n}{n-2kt}&#x3D;\binom{n}{2kt}<br>$$</p>
<p><strong>非法状态</strong>：设 $\square$ 表示待删数字，内部数字为编号</p>
<p>$$<br>\boxed{1}\quad\boxed{2}\quad\boxed{3}\quad\boxed{4}\cdots\boxed{2kt-3}\quad\boxed{2kt-2}\quad\boxed{2kt-1}\quad\boxed{2kt}\quad<br>$$</p>
<p>非法状态即“不存在<strong>空</strong>，其左右<strong>待删数字</strong>个数都大于等于 $k$”，也就是“即使存在空，其左右<strong>待删数字</strong>个数都小于 $k$”，那么也就是<strong>仅</strong>在 $\color{green}{\sqcup}$ 可以存在若干<strong>最终状态</strong>的数字：</p>
<p>$$<br>\color{green}{\sqcup}\boxed{1}\color{green}{\sqcup}\boxed{2}\color{green}{\sqcup}\boxed{3}\color{green}{\sqcup}\boxed{4}\color{green}{\sqcup}\cdots\color{green}{\sqcup}\boxed{k-2}\color{green}{\sqcup}\boxed{k-1}\color{green}{\sqcup}\boxed{k}\cdots<br>$$</p>
<p>$$<br>\cdots\boxed{2kt-k+1}\color{green}{\sqcup}\boxed{2kt-k+2}\color{green}{\sqcup}\boxed{2kt-k+3}\color{green}{\sqcup}\boxed{2kt-k+4}\color{green}{\sqcup}\cdots\color{green}{\sqcup}\boxed{2kt-2}\color{green}{\sqcup}\boxed{2kt-1}\color{green}{\sqcup}\boxed{2kt}\color{green}{\sqcup}<br>$$</p>
<p>问题转化为将 $n-2kt$ 个数放置在 $2k$ 个格子里（可以放 $0$ 个）的方案数。经典问题，借物隔板法，得<strong>非法状态</strong>方案数为：</p>
<p>$$<br>\binom{n-2kt+2k-1}{2k-1}<br>$$</p>
<p>综上得，当固定删除元素的个数（设共删去 $2k\cdot t$ 个数）时，<strong>合法状态</strong>方案数为：</p>
<p>$$<br>\binom{n}{2kt}-\binom{n-2kt+2k-1}{2k-1}<br>$$</p>
<p>最终对于固定 $n$ 和 $k$ 而言，枚举 $t$ 并累加即可（注意可以一次也不操作，所以原始数组也算一种答案），即得：</p>
<p>$$<br>\begin{aligned}<br>ans_{n,k}<br>&amp;&#x3D;1+\sum_{t&#x3D;1}^{\lfloor \frac{n}{2k} \rfloor} \binom{n}{2kt}-\binom{n-2kt+2k-1}{2k-1}\<br>\end{aligned}<br>$$</p>
<p>枚举 $k$ 即得对于 $n$ 的答案</p>
<p>朴实无华的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> fac[N],facinv[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*fac[a]*facinv[b]%mod*facinv[a-b]%mod;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n,<span class="hljs-number">1</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n/(<span class="hljs-number">2</span>*k);i++)<br>            ans[k]+=<span class="hljs-built_in">C</span>(n,<span class="hljs-number">2</span>*k*i)-<span class="hljs-built_in">C</span>(n<span class="hljs-number">-2</span>*i*k<span class="hljs-number">+2</span>*k<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*k<span class="hljs-number">-1</span>),ans[k]%=mod;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;k++)<br>        cout&lt;&lt;(ans[k]+mod)%mod&lt;&lt;<span class="hljs-string">&quot; \n&quot;</span>[k==(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);std::cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1000000</span>;i++)<br>        fac[i]=<span class="hljs-number">1ll</span>*i*fac[i<span class="hljs-number">-1</span>]%mod;<br>    facinv[<span class="hljs-number">1000000</span>]=<span class="hljs-number">490058372</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">999999</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        facinv[i]=<span class="hljs-number">1ll</span>*facinv[i<span class="hljs-number">+1</span>]*(i<span class="hljs-number">+1</span>)%mod;<br><br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>math</tag>
        <tag>算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
